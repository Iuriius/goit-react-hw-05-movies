{"version":3,"file":"static/js/723.ee6d9ced.chunk.js","mappings":"wSAMMA,E,QAAQC,EAAAA,OAAa,CACzBC,QAAS,kCASEC,EAAa,mCAAG,oGACJH,EAAMI,IAAN,WART,uBAQkC,CAC9CC,OAAQ,CACNC,QAAS,sCAHc,cACrBC,EADqB,yBAMpBA,EAASC,KAAKC,SANM,2CAAH,qDASbC,EAAY,mCAAG,WAAMC,GAAN,uFACHX,EAAMI,IAAN,WAhBP,gBAgBkC,CAChDC,OAAQ,CACNC,QAAS,mCACTM,MAAOD,KAJe,cACpBJ,EADoB,yBAOnBA,EAASC,KAAKC,SAPK,2CAAH,sDAUZI,EAAU,mCAAG,WAAMC,GAAN,uFACDd,EAAMI,IAAN,iBAAoBU,GAAM,CAC/CT,OAAQ,CACNC,QAAS,sCAHW,cAClBC,EADkB,yBAMjBA,EAASC,MANQ,2CAAH,sDASVO,EAAU,mCAAG,WAAMD,GAAN,uFACDd,EAAMI,IAAN,iBAAoBU,EAApB,YAAkC,CACvDT,OAAQ,CACNC,QAAS,sCAHW,cAClBC,EADkB,yBAMjBA,EAASC,KAAKQ,MANG,2CAAH,sDASVC,EAAY,mCAAG,WAAMH,GAAN,uFACHd,EAAMI,IAAN,iBAAoBU,EAApB,YAAkC,CACvDT,OAAQ,CACNC,QAAS,sCAHa,cACpBC,EADoB,yBAMnBA,EAASC,KAAKC,SANK,2CAAH,qD,4KCnDZS,EAAQC,EAAAA,EAAAA,IAAH,sBACLC,EAAWD,EAAAA,EAAAA,GAAH,sBACRE,EAAWF,EAAAA,EAAAA,GAAH,sB,mBCORG,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOP,EAAP,KAAaQ,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAESf,EAAAA,EAAAA,IAAWY,GAFpB,OAERpB,EAFQ,OAGdiB,EAAQjB,GAHM,gDAKdmB,EAAS,EAAD,IALM,yDAAH,qDAQfI,GACD,GAAE,CAACH,IAEAF,GACFM,EAAAA,GAAAA,MAAA,kCAEE,SAAC,KAAD,WACE,iEAKJ,UAACX,EAAD,YACE,0BACE,SAAC,KAAD,MAEDJ,EAAKgB,OAAS,GACbhB,EAAKiB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAWtB,EAAlC,EAAkCA,GAAlC,OACP,UAACO,EAAD,YACE,SAACH,EAAD,CACEmB,IACEF,EAAY,yCAC0BA,GAD1B,eAIdG,IAAKJ,KAEP,4BACE,wBAAKA,KACL,uCAAeE,UAXJtB,EADR,MAkBhB,C","sources":["components/Api/Api.jsx","components/Cast/CastStyled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n/*\n/**|======================================\n/**| Fetch Axios Library\n/**|======================================\n*/\nconst fetch = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\nconst popular = 'trending/movie/week';\nconst movieName = 'search/movie';\n/*\n/**|======================================\n/**| Export Fetch Results\n/**|======================================\n*/\nexport const popularMovies = async () => {\n  const response = await fetch.get(`/${popular}`, {\n    params: {\n      api_key: '23220e7137d4edd367a9f0eb448d494f',\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMovies = async searchQuery => {\n  const response = await fetch.get(`/${movieName}`, {\n    params: {\n      api_key: '23220e7137d4edd367a9f0eb448d494f',\n      query: searchQuery,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchById = async id => {\n  const response = await fetch.get(`/movie/${id}`, {\n    params: {\n      api_key: '23220e7137d4edd367a9f0eb448d494f',\n    },\n  });\n  return response.data;\n};\n\nexport const searchCast = async id => {\n  const response = await fetch.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: '23220e7137d4edd367a9f0eb448d494f',\n    },\n  });\n  return response.data.cast;\n};\n\nexport const searchReview = async id => {\n  const response = await fetch.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: '23220e7137d4edd367a9f0eb448d494f',\n    },\n  });\n  return response.data.results;\n};\n","import styled from '@emotion/styled';\n\nexport const Image = styled.img``;\nexport const CastList = styled.ul``;\nexport const CastItem = styled.li``;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { searchCast } from '../Api/Api';\nimport { CastList, CastItem, Image } from '../Cast/CastStyled';\nimport { Container } from '../Layout/LayoutStyled';\n/*\n/**|======================================\n/**| Export Cast\n/**|======================================\n*/\nexport const Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await searchCast(movieId);\n        setCast(response);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  if (error) {\n    toast.error(`Sorry, there's been an error!`);\n    return (\n      <Container>\n        <p>Something went wrong ðŸ˜ž</p>\n      </Container>\n    );\n  }\n  return (\n    <CastList>\n      <div>\n        <Toaster />\n      </div>\n      {cast.length > 0 &&\n        cast.map(({ name, profile_path, character, id }) => (\n          <CastItem key={id}>\n            <Image\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : `ðŸ˜ž`\n              }\n              alt={name}\n            />\n            <div>\n              <h2>{name}</h2>\n              <p>Character: {character}</p>\n            </div>\n          </CastItem>\n        ))}\n    </CastList>\n  );\n};\n"],"names":["fetch","axios","baseURL","popularMovies","get","params","api_key","response","data","results","searchMovies","searchQuery","query","searchById","id","searchCast","cast","searchReview","Image","styled","CastList","CastItem","Cast","useState","setCast","error","setError","movieId","useParams","useEffect","fetchCast","toast","length","map","name","profile_path","character","src","alt"],"sourceRoot":""}